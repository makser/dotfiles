# -- Dotfiles Directory --------------------------------------------------------
export XDG_CONFIG_HOME="$HOME/.config"
export DOTFILES="$HOME/.dotfiles"

# Helper scripts
source "$DOTFILES/scripts/helpers/functions.sh"

# -- Local Configuration (Before Default) --------------------------------------
if [[ -f "$DOTFILES/zsh/zshrc.local.pre" ]]; then
  source $DOTFILES/zsh/zshrc.local.pre
fi

# -- Zsh -----------------------------------------------------------------------
ZSH="$HOME/.oh-my-zsh"
ZSH_CUSTOM="$DOTFILES/zsh/custom"
fpath=( "$DOTFILES/zsh/custom" $fpath)

# -- Theme ---------------------------------------------------------------------
export NVIM_TUI_ENABLE_TRUE_COLOR=1
ZSH_THEME="refined"

# -- ZSH Plugins ---------------------------------------------------------------
plugins=(git tmux npm bower vi-mode pj zsh-syntax-highlighting)
if exists "virtualenvwrapper"; then plugins+=virtualenvwrapper; fi

fpath=($DOTFILES/zsh/custom/completion $fpath)

# Add Homebrew completions to config if they can be found
local brew_completions="$(brew --prefix)/share/zsh/site-functions"
if [[ -d $brew_completions ]]; then
  fpath=($fpath $brew_completions)
fi

# -- Oh My Zsh -----------------------------------------------------------------
source $ZSH/oh-my-zsh.sh

# -- Named Directories ---------------------------------------------------------
unsetopt auto_name_dirs

# -- Completion Config ---------------------------------------------------------
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*.class'

# -- Command History -----------------------------------------------------------
export HISTSIZE=500
export SAVEHIST=500

# -- Options -------------------------------------------------------------------
unsetopt correct_all
unsetopt correct

# -- Variables -----------------------------------------------------------------
function sc {
    NAME=$1
    echo -en "\033]0;${NAME}\a"
    cd ~/projects/$NAME
    screen -S ${NAME}
    screen -X "select 0"
}

alias ll="ls -al -h"
alias pyc-rm="sudo find ./ -name '*.pyc' -delete; sudo find ./ -name '*.*.orig' -delete; sudo find ./ -name '*.pyo' -delete; sudo find ./ -name '*.*~' -delete;"

alias grep="grep --exclude='*.pyo' --exclude='*.pyc' --exclude='*~' --exclude='*pb2.py' --exclude='.*.swp' --exclude='*.orig'"

#alias vim="/usr/local/Cellar/vim/8.0.1600/bin/vim"
#alias vimdiff="/usr/local/Cellar/vim/8.0.1600/bin/vimdiff"
#alias python="/usr/local/Cellar/python@2/2.7.15_1/bin/python"
#alias pip="/usr/local/Cellar/python/2.7.14/bin/pip"
#alias pip3="/usr/local/Cellar/python/3.6.4_4/bin/pip3"
export EDITOR=vim

alias dm=docker-machine
alias dc=docker-compose
alias docker-cleanup=docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm

# -- Aliases -------------------------------------------------------------------
if [[ -f "$DOTFILES/aliases" ]]; then
  source $DOTFILES/aliases
fi

if [[ -f "$HOME/.aliases" ]]; then
    source $HOME/.aliases
fi

if exists "hub"; then alias git=hub; fi

if exists "gittower"; then alias tower='gittower `git rev-parse --show-toplevel`'; fi

# alias vim=nvim
alias vi=vim
alias dm=docker-machine
alias dc=docker-compose
alias docker-cleanup=docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm
alias edit="$EDITOR"

# -- Functions -----------------------------------------------------------------

# Extract archive based on file type
# Taken from http://justinlilly.com/dotfiles/zsh.html
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# -- Git -----------------------------------------------------------------------
zstyle ':completion:*:*:hub:*' user-commands ${${(M)${(k)commands}:#git-*}/git-/}
_git-delete-tag() { compadd "$@" $(git tag) }

# -- Tmux ----------------------------------------------------------------------
export DISABLE_AUTO_TITLE="true"
alias tmux="tmux -2"

# -- TheFuck -------------------------------------------------------------------
#    https://github.com/nvbn/thefuck
alias fuck='$(thefuck $(fc -ln -1))'

# -- Add DOTFILES bin to PATH --------------------------------------------------
export PATH="$PATH:$DOTFILES/bin"

# -- Xiki ----------------------------------------------------------------------
if [[ -f "$HOME/.xsh" ]]; then
  source $HOME/.xsh
fi

# -- fzf -----------------------------------------------------------------------
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
  export FZF_TMUX=1
  export FZF_DEFAULT_OPTS='--color 16,info:6,hl:13,hl+:13'
  export FZF_DEFAULT_COMMAND="rg --files-with-matches --no-messages -F ''"
  export FZF_CTRL_T_COMMAND="rg --files-with-matches --no-messages --hidden -F '' | grep -v .git/"
fi

# -- OS-Specific Config --------------------------------------------------------
if [[ $(uname) == 'Darwin' ]]; then
  # Load OSX config
  source $DOTFILES/zsh/zshrc.osx
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # Load Linux config
fi

# -- asdf ---------------------------------------------------------------------

# ASDF is cloned manually into home directory
if [[ -d "$HOME/.asdf/.git" ]]; then
  export ASDF_DIR="$HOME/.asdf"
fi

# ASDF is installed through Homebrew
if [[ -d "/usr/local/opt/asdf" ]]; then
  export ASDF_DIR="/usr/local/opt/asdf"
fi

export ASDF_DATA_DIR="$HOME/.asdf"

source $ASDF_DIR/asdf.sh

# -- Yarn ---------------------------------------------------------------------
# Make the shell aware of global packages installed by Yarn
local yarn_global_modules="$XDG_CONFIG_HOME/yarn/global/node_modules"
if [[ -d "$yarn_global_modules/.bin" ]]; then
  export PATH="$PATH:$yarn_global_modules/.bin"
fi

# -- Go ------------------------------------------------------------------------
# Add $GOTPATH/bin to the $PATH
export GOPATH=$HOME/Code/go
export PATH="$PATH:$GOPATH/bin"

# -- Kubectl
if exists "kubectl"; then
  source <(kubectl completion zsh)
fi

# -- Local Configuration (After Default) ---------------------------------------
if [[ -f "$DOTFILES/zsh/zshrc.local" ]]; then
  source $DOTFILES/zsh/zshrc.local
fi

# Skip forward/back a word with opt-arrow
bindkey '[C' forward-word
bindkey '[D' backward-word
#
# # Skip to start/end of line with cmd-arrow
bindkey "\033[1~" beginning-of-line
bindkey "\033[4~" end-of-line
#
# # Delete word with opt-backspace/opt-delete
bindkey '[G' backward-kill-word
bindkey '[H' kill-word
#
# # Delete line with cmd-backspace
bindkey '[I' kill-whole-line

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
source ~/.iterm2_shell_integration.zsh

export PATH="/usr/local/bin:$PATH"

source $DOTFILES/zsh/tmuxinator.zsh
export PATH="/usr/local/opt/node@8/bin:$PATH"
